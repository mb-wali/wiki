pipeline {
  options {
    buildDiscarder(logRotator(numToKeepStr: '3'))
    timestamps()
    //timeout(time: 15, unit: 'MINUTES')
    ansiColor('xterm')
  }
  agent any
  environment {
    PROJECT = 'cosckoya/jenkinsci'
    COMMIT = sh ( script: 'git rev-parse --short=7 HEAD', returnStdout: true).trim()
    IMAGE = "$PROJECT:$COMMIT"
    AUTHOR = sh ( script: 'git --no-pager show -s --format="%an" ${commit}', returnStdout: true).trim()
    // LOCAL REGISTRY
    //REGISTRY = 'registry:5000'
    //REGISTRY_CREDS = ''
    //PUBLIC REGISTRY
    REGISTRY = 'https://index.docker.io/v1/'
    REGISTRY_CREDS = 'dockerhub-creds'
    // AWS ECR
    //REGISTRY = 'https://109821121799.dkr.ecr.us-east-1.amazonaws.com'
    //REGISTRY_CREDS = 'ecr:us-east-1:aws-ecr-credentials'
    // Google GCR
    //REGISTRY = 'https://eu.gcr.io'
    //REGISTRY_CREDS = 'gcr:gcp-gcr-credentials'
    // Azure AZR
    //REGISTRY = 'https://laboratory.azurecr.io'
    //REGISTRY_CREDS = 'acr_credentials'
    }
  stages {

    stage('Debug') { steps { sh 'env|sort' } }

    stage('Build') {
      steps {
        script {
          docker.build("$IMAGE","-f docker/Dockerfile .")
        }
        sh 'docker tag "$IMAGE" "$PROJECT:latest"'
      }
    }

    stage('Publish') {
      steps {
        script {
          docker.withRegistry(REGISTRY, REGISTRY_CREDS) {
            docker.image("$IMAGE").push()
            docker.image("$PROJECT:latest").push()
          }
        }
      }
    }

    stage('File') {
      steps {
        withCredentials([file(credentialsId: 'secret', variable: 'FILE')]) {
          sh """
            cat $FILE
          """
        }
      }
    }
/*
    stage('Deploy') {
      steps{
        kubernetesDeploy(kubeconfigId: 'minikube-creds',
                         configs:'jenkins-ci-deployment.yaml',
                         enableConfigSubstitution: true )
      }
    }
*/
  }
  post {
    always { cleanWs() }
  }
}
